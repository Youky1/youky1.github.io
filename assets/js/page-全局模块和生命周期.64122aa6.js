(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{637:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"全局模块和生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局模块和生命周期"}},[t._v("#")]),t._v(" 全局模块和生命周期")]),t._v(" "),s("p",[t._v("AOP 中的切面指的是请求与返回过程中的某个切面，而全局操作可以看成是项目层面的切面操作。即对于所有模块，在导入依赖以及某个生命周期时进行操作。")]),t._v(" "),s("h2",{attrs:{id:"全局模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局模块"}},[t._v("#")]),t._v(" 全局模块")]),t._v(" "),s("p",[t._v("当 A 模块中需要使用 B 模块的 service 时，需要在 B 中 exports 导出，再在 A 模块中 imports 导入。如果要在多个模块中使用，则都要重复 imports 的操作。\n此时可以将 B 模块声明为全局模块，这样在其他模块中无需导入就可使用")]),t._v(" "),s("div",{staticClass:"language-ts line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token decorator"}},[s("span",{pre:!0,attrs:{class:"token at operator"}},[t._v("@")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Global")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token decorator"}},[s("span",{pre:!0,attrs:{class:"token at operator"}},[t._v("@")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Module")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  controllers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("BController"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  providers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("BService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BModule")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("缺点：会导致代码中使用的模块不知道来源，降低代码可维护性")]),t._v(" "),s("h2",{attrs:{id:"生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),s("p",[t._v("每个生命周期对应一个 interface，需要执行生命周期操作的类中要实现接口对应的方法，方法都支持 async。")]),t._v(" "),s("p",[t._v("同一生命周期方法的调用顺序是：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Controller => Provider => Module\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[t._v("#")]),t._v(" 创建")]),t._v(" "),s("p",[t._v("初始化时，递归初始化模块，依次调用 "),s("code",[t._v("onModuleInit")]),t._v(" 方法。\n全部初始化完之后，再依次调用 "),s("code",[t._v("onApplicationBootstrap")]),t._v("方法。\n之后，Nest 应用就进入正常运行了。")]),t._v(" "),s("h3",{attrs:{id:"销毁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#销毁"}},[t._v("#")]),t._v(" 销毁")]),t._v(" "),s("p",[t._v("应用销毁时，会调用 "),s("code",[t._v("onModuleDestroy")]),t._v(" 和 "),s("code",[t._v("beforeApplicationShutdown")]),t._v("，然后停止监听网络端口。\n"),s("code",[t._v("beforeApplicationShutdown")]),t._v(" 方法有一个参数，是系统信号。这个终止信号是别的进程传进来的。")]),t._v(" "),s("p",[t._v("之后调用 "),s("code",[t._v("onApplicationShutdown")]),t._v(" 方法，然后停止进程。一般在该方法中进行资源的销毁，如关闭连接。")])])}),[],!1,null,null,null);s.default=e.exports}}]);