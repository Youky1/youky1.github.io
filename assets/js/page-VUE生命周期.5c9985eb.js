(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{617:function(t,e,v){"use strict";v.r(e);var _=v(1),a=Object(_.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vue生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue生命周期"}},[t._v("#")]),t._v(" VUE生命周期")]),t._v(" "),e("h2",{attrs:{id:"初始化阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化阶段"}},[t._v("#")]),t._v(" 初始化阶段")]),t._v(" "),e("blockquote",[e("p",[t._v("是一个vue实例从无到有的过程")])]),t._v(" "),e("ol",[e("li",[t._v("以"),e("code",[t._v("new Vue({})")]),t._v("为开头，表示创建一个vue的实例对象。")]),t._v(" "),e("li",[t._v("然后初始化一个空的vue实例对象，此时这个对象身上只有默认的一些生命周期函数和默认的事件")]),t._v(" "),e("li",[e("em",[e("strong",[t._v("beforeCreate")])]),t._v("：此时data、methods中的数据都还未初始化。")]),t._v(" "),e("li",[e("em",[e("strong",[t._v("created")])]),t._v("：此时ata、methods中的数据已经完成初始化。"),e("strong",[t._v("要调用methods中的方法或操作data数据，最早要在created")])]),t._v(" "),e("li",[t._v("开始编译模板，最终在内存中生成一个模板字符串。"),e("strong",[t._v("此时并没有将模板挂载到DOM")])]),t._v(" "),e("li",[t._v("判断实例是否有el选项，若有则进入挂载；若没有则等待调用"),e("code",[t._v("$mount")]),t._v("方法")]),t._v(" "),e("li",[e("em",[e("strong",[t._v("beforeMount")])]),t._v("：此时模板已经编译好，但还没有挂载。"),e("strong",[t._v("此时页面还是旧的")])]),t._v(" "),e("li",[t._v("用内存中的模板替换到真实页面中去")]),t._v(" "),e("li",[e("em",[e("strong",[t._v("mounted")])]),t._v("：此时模板替换已完成。"),e("strong",[t._v("要操作DOM，最早要在mounted")])])]),t._v(" "),e("h2",{attrs:{id:"运行阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行阶段"}},[t._v("#")]),t._v(" 运行阶段")]),t._v(" "),e("ol",[e("li",[e("em",[e("strong",[t._v("beforeUpdate")])]),t._v("：此时data中的数据是新的，但"),e("strong",[t._v("页面还是旧的")])]),t._v(" "),e("li",[t._v("根据最新的数据重新渲染DOM树并进行替换，完成数据从Model层到视图层的更新")]),t._v(" "),e("li",[e("em",[e("strong",[t._v("updated")])]),t._v("：页面和data已经同步，都是最新的状态")])]),t._v(" "),e("h2",{attrs:{id:"销毁阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#销毁阶段"}},[t._v("#")]),t._v(" 销毁阶段")]),t._v(" "),e("ol",[e("li",[e("em",[e("strong",[t._v("beforeDestroy")])]),t._v("：销毁之前执行，此时实例的data、methods等都还属于可用状态")]),t._v(" "),e("li",[e("em",[e("strong",[t._v("destroyed")])]),t._v("：组件已被完全摧毁，data、methods等都已不可用")])]),t._v(" "),e("h2",{attrs:{id:"父组件监听子组件的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父组件监听子组件的生命周期"}},[t._v("#")]),t._v(" 父组件监听子组件的生命周期")]),t._v(" "),e("ol",[e("li",[t._v("在子组件的生命周期函数中触发自定义事件，并在父组件中进行监听")]),t._v(" "),e("li",[t._v("在父组件中用"),e("code",[t._v("@hook:xxx")]),t._v("的形式进行监听，xxx代表生命周期名称。执行顺序：子组件生命周期、父组件的响应函数")])])])}),[],!1,null,null,null);e.default=a.exports}}]);