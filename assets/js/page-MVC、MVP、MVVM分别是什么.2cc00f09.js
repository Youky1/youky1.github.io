(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{604:function(e,v,t){"use strict";t.r(v);var r=t(1),_=Object(r.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"mvc、mvp、mvvm分别是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvc、mvp、mvvm分别是什么"}},[e._v("#")]),e._v(" MVC、MVP、MVVM分别是什么")]),e._v(" "),v("h2",{attrs:{id:"mvc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[e._v("#")]),e._v(" MVC")]),e._v(" "),v("blockquote",[v("p",[e._v("模型Model、视图View、控制器Controller")])]),e._v(" "),v("ul",[v("li",[e._v("View传送指令到Controller")]),e._v(" "),v("li",[e._v("Controller完成业务逻辑，并要求Model改变状态")]),e._v(" "),v("li",[e._v("Model将新的数据发送给View，即用户得到了反馈")])]),e._v(" "),v("h2",{attrs:{id:"mvp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvp"}},[e._v("#")]),e._v(" MVP")]),e._v(" "),v("p",[e._v("将MVC中的Controller改成了"),v("strong",[e._v("Presenter")]),e._v("，同时改变了通信方向。")]),e._v(" "),v("ul",[v("li",[e._v("View和Presenter之间，Presenter和Model之间进行双向通信")]),e._v(" "),v("li",[e._v("View层非常薄，不负责任何逻辑，称为被动视图。")]),e._v(" "),v("li",[e._v("Presenter层非常厚，负责了所有的业务逻辑")])]),e._v(" "),v("h2",{attrs:{id:"mvvm"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[e._v("#")]),e._v(" MVVM")]),e._v(" "),v("blockquote",[v("p",[e._v("Model–View–ViewModel")])]),e._v(" "),v("p",[e._v("源自于MVC模式，促进了前后端业务逻辑的分离。")]),e._v(" "),v("h3",{attrs:{id:"view"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#view"}},[e._v("#")]),e._v(" View")]),e._v(" "),v("p",[e._v("View是视图层，负责构建页面并与用户交互")]),e._v(" "),v("h3",{attrs:{id:"model"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#model"}},[e._v("#")]),e._v(" Model")]),e._v(" "),v("p",[e._v("Model是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，对于前端来说就是后端提供的api接口")]),e._v(" "),v("h3",{attrs:{id:"viewmodel"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#viewmodel"}},[e._v("#")]),e._v(" ViewModel")]),e._v(" "),v("p",[e._v("ViewModel是MVVM的核心。")]),e._v(" "),v("p",[e._v("在这一层，对Model层获取的数据进行转换和二次封装，来满足View层的需要。")]),e._v(" "),v("p",[e._v("ViewModel所封装的数据模型包括视图的"),v("strong",[e._v("状态")]),e._v("和"),v("strong",[e._v("行为")]),e._v("两部分。而Model层只包含状态信息")]),e._v(" "),v("ul",[v("li",[e._v("视图状态：页面某个位置显示的内容")]),e._v(" "),v("li",[e._v("视图行为：页面和用户的交互")])]),e._v(" "),v("p",[e._v("在MVVM框架中，ViewModel层和View层实现了双向绑定，即ViewModel中的内容会自动显示在View中，开发者只需要维护ViewModel层，视图即可自动更新")])])}),[],!1,null,null,null);v.default=_.exports}}]);